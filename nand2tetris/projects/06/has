#!/usr/bin/env groovy

class HackAssembler {
    boolean listing = false

    static void main(String[] args) {
        HackAssembler app = new HackAssembler()
        app.listing = true

        args.each { fname ->
            app.assemble(fname, fname.replaceAll(/\.asm/, '.hack'))
        }
    }

    def defaultSymbol = [
         R0: 0,  R1: 1,   R2: 2,    R3: 3
      ,  R4: 4,  R5: 5,   R6: 6,    R7: 7
      ,  R8: 8,  R9: 9,   R10: 10, R11: 11
      , R12: 12, R13: 13, R14: 14, R15: 15
      , SCREEN: 0x4000, KBD: 0x6000
      , SP: 0x0000, LCL: 0x0001, ARG: 0x0002
      , THIS: 0x0003, THAT: 0x0004
    ]
    def assemble(String asmName, String hackName) {
        try {
            if (asmName == hackName)
                throw error(0, 'source and output same filename')

            def text = lines(textOf(asmName))

            def symbol = pass1(text)
            def prog = pass2(symbol, text)
            def output = prog.collect { binary(it) }.join('\n')
            new File(hackName).text = "$output\n"
        } catch (AssemblerError e) {
            printf('In %s, %s: %s\n', asmName, e.lineno, e.message)
        }
    }

    String binary(int value) {
        def result = Integer.toBinaryString(value)
        int size = result.length()

        if (size < 16)
            return sprintf('%16s', result).replaceAll(' ', '0')
        else if (size > 16)
            return result[0..15]
        else
            return result
    }

    def pass1(text) {
        int pc = 0
        def symbol = [:] + defaultSymbol

        // pass 1 -- define labels
        pass(text) { token, lno, line ->
            if (token.type == 'label') {
                def label = token.value
                if (!symbol.containsKey(label))
                    symbol[label] = pc
            } else {
                if (token.type != 'skip')
                    ++pc
            }
        }

        return symbol
    }

    def pass2(symbol, text) {
        def image = []
        def pc = 0
        int mem = 16

        // pass 2 -- assemble
        pass(text) { token, lno, line ->
            if (token.type == 'load') {
                def label = token.value
                int value
                if (label.isInteger())
                    value = label.toInteger()
                else {
                    def n = symbol[label]
                    if (n == null)
                        symbol[label] = n = mem++
                    value = n
                }
                image[pc++] = value & 0xFFFF
                list('  %04X: %04X   %s\n', pc-1, image[pc-1], line)
            } else if (token.type == 'command') {
                image[pc++] = command(lno, token)
                list('  %04X: %04X   %s\n', pc-1, image[pc-1], line)
            } else if (token.type == 'label') {
                list('  %04X: (%04X) %s\n', pc, symbol[token.value], line)
            } else {
                list('               %s\n', line)
            }
        }

        return image
    }

    def list(String fmt, Object[] args) {
        if (listing)
            printf(fmt, args)
    }

    void pass(text, Closure code) {
        text.eachWithIndex { line, lno ->
//            if (!line)
//                return

            def token = parse(lno, line)
            code.call(token, lno, line)
        }
    }

    int command(lno, token) {
        return compute(lno, token.compute ?: '') |
               dest(lno, token.dest ?: '') |
               branch(lno, token.branch ?: '')
    }

    def element = [
        label: { text ->
            (text =~ /\((\S+)\)/)
                .collect { [value: it[1]] }
        }
      , load: { text ->
            (text =~ /@(\S+)/)
                .collect { [value: it[1]] }
        }
      , command: { text ->
            (text =~ /(([AMD]+)=)?([-!+|&01AMD]+)(;(\S+))?/)
                .collect { [dest: it[2], compute: it[3], branch: it[5]] }
        }
    ]

    def destRegister = [
        'M': 0x01
      , 'D': 0x02
      , 'A': 0x04
    ]

    int dest(lno, value) {
        int result = 0;
        value.toUpperCase().each { 
            def field = destRegister[it]
            if (!field)
                throw error(lno, "unknown register: '%s'", it)
            result |= field
        }
        return result << 3
    }

    def jumpKeywords = [
        JGT: 1
      , JEQ: 2
      , JGE: 3
      , JLT: 4
      , JNE: 5
      , JLE: 6
      , JMP: 7
    ]

    int branch(lno, value) {
        int result = 0;

        if (!value)
            return result

        result = jumpKeywords[value.toUpperCase()]
        if (!result)
            throw error(lno, 'unknown branch keyword: %s', value)
        return result
    }

    def computeForms = [
        '0':   0x2A
      , '1':   0x3F
      , '-1':  0x3A

      , 'D':   0x0C
      , 'A':   0x30, 'M':   0x70
      , '!D':  0x0D
      , '!A':  0x31, '!M':  0x71
      , '-D':  0x0F
      , '-A':  0x33, '-M':  0x73

      , 'D+1': 0x1F
      , 'A+1': 0x37, 'M+1': 0x77
      , 'D-1': 0x0E
      , 'A-1': 0x32, 'M-1': 0x72
      , 'D+A': 0x02, 'D+M': 0x42
      , 'D-A': 0x13, 'D-M': 0x53
      , 'A-D': 0x07, 'M-D': 0x47

      , 'D&A': 0x00, 'D&M': 0x40
      , 'D|A': 0x15, 'D|M': 0x55
    ]

    int compute(lno, value) {
        def kind = value.replaceAll(/\s/, '').toUpperCase()
        if (!kind)
            throw error(lno, "invalid command")

        def result = computeForms[kind]
        if (result == null)
            throw error(lno, "illegal command")
        return 0xE000 | (result << 6)
    }

    def parse(lno, line) {
        def (text, comment) = tear(line)
        if (!text?.trim())
            return [type: 'skip']

        for(rule in element) {
            def (type, check) = [rule.key, rule.value]
            def (result) = check(text)

            if (result)
                return [type: type] + result
        }
        throw error(lno, 'parse failure - %s', line)
    }

    String textOf(name) {
        return new File(name).text
    }

    def tear(line) {
        return (line.split(/\/\//) as List ?: ['', '']).with { seg ->
            seg.size() == 1 ? seg << '' : seg
        }
    }

    List<String> lines(String text) {
        return text?.split(/\r?\n/) ?: []
    }

    AssemblerError error(int lineno, String message, Object[] args) {
        return new AssemblerError(lineno, sprintf(message, args))
    }

    static class AssemblerError extends RuntimeException {
        AssemblerError(int lineno, String message) {
            super(message)
            this.lineno = lineno
        }

        int lineno
    }
}
