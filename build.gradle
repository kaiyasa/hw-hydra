// Creates scripts for entry points
// Subproject must apply application plugin to be able to call this method.
def createScript(project, mainClass, name) {
  project.tasks.create(name: name, type: CreateStartScripts) {
    outputDir       = new File(project.buildDir, 'scripts')
    mainClassName   = mainClass
    applicationName = name
    classpath       = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
  }
  project.tasks[name].dependsOn(project.jar)

  project.applicationDistribution.with {
    into("bin") {
      from(project.tasks[name])
      fileMode = 0755
    }
  }
}

allprojects {
  project.group = 'org.nand2tetris'
  project.version = '2.5.7'
}

subprojects {
  apply plugin: "java"

  tasks.withType(JavaCompile) { 
    sourceCompatibility = "1.4"
    targetCompatibility = "1.4" 
  }

  repositories {
      mavenCentral()
  }
}

project(':HackGUI') {
  dependencies {
    compile project(':Hack')
  }
}

project(':Compilers') {
  dependencies {
    compile project(':Hack')
  }
}

project(':Simulators') {
  dependencies {
    compile project(':Hack')
    compile project(':Compilers')
  }
}

project(':SimulatorsGUI') {
  dependencies {
    compile project(':Simulators')
    compile project(':HackGUI')
  }
}

project(':BuiltInChips') {
  dependencies {
    compile project(':Simulators')
    compile project(':HackGUI')
    compile project(':SimulatorsGUI')
  }
}

project(':BuiltInVMCode') {
  dependencies {
    compile project(':Simulators')
  }
}

project(':MainClasses') {
  apply plugin: "application"

  // The next two lines disable the tasks for the primary main which by default
  // generates a script with a name matching the project name. 
  // You can leave them enabled but if so you'll need to define mainClassName
  // And you'll be creating your application scripts two different ways which 
  // could lead to confusion
  startScripts.enabled = false
  run.enabled = false

//  mainClassName = 'bob'

  dependencies {
    compile project(':HackGUI')
    compile project(':SimulatorsGUI')
  }

  // define applications
  [  'CPUEmulator':       'CPUEmulatorMain'
   , 'HardwareSimulator': 'HardwareSimulatorMain'
   , 'TextComparer':      'TextComparer'
   , 'VMEmulator':        'VMEmulatorMain'
  ].each { scriptName, mainClass ->
    createScript(project, mainClass, scriptName)
  }
}
